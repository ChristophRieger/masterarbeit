WHAT I DID SO FAR:
- added generateRandom1DLineImage() to dataGenerator DONE
- added analytically determined weights to file DONE
- script works, need to calc percentages of spikes of different outputs DONE
- started generation of result plot ... visualization of training image + prior is fine... percentages of simulation and math analysis missing...
- implemented mathematische analyse at end of simulation and hand over x and z. (image and prior)... DONEn
- whole anaconda stuff finally broke :( ... created new env MASTER, WIP, probly need to update some stuff after? and create this env on IGI Cluster.
... got old anaconda running again, altough linting and debugging doesnt work anymore


fInput:

Feuerrate der input neuronen war im netz bei 1225 input pixel = 20 Hz

hier haben wir ein input image mit 1 x 9 = 9 input pixel...
mit 20 prior neurons (10 pro klasse...) und 200 Hz (quasi das maximum das wir vertreten können) hatte es einen merklichen Impact.

I würd mal versuchen die 9 Pixel mit 200 Hz feuern zu lassen und schau was passiert....

fPrior:
lass ich mal auf 200 Hz

numberZNeurons:
sollte 4 sein, eins pro Klasse (nur eins von denen ist active at a time)

numberYNeurons:
4 (eins pro Klasse)

numberXNeurons:
9 * 2 = 18

c:

Ich würd gerne versuchen c = 1 zu lassen, weil das macht es leichter die mathematische analyse durchzuführen. Aber es geht auch mit c ungleich 1.

FRAGEN:
wie soll ich den Noise des Inputs implementieren? ... pro klasse sind 3 pixel aktive, die gehen immer nur in 2 pixel schritten weiter. Also es gibt kein input bild zwischen den klassen.
kann mehr als 1 der 3 Input neurons flippen?  ... ja, 3 pixel aktiv setzen, dann alle mit 10% flippen
Können je mehr als 3 Input neurons aktiv sein? ... ja, 3 pixel aktiv setzen, dann alle mit 10% flippen
Wandert der 3er input in 1er schritten?   ... nein, nur in 2er schritten wo die klassen definiert sind.
I glaub mei Prior Matrix is falsch, wegen case position = 2 usw (wenn mitte des 3er blocks zwischen 2 klassen liegt) ...  na sie hat gepasst, da wir in 2er schritten gehn.



....... fehlersuche:
soweit ichs jetzt verstehe, sind sowohl input als auch prior feuerraten relevant.... je höher input firing rate, desto schmäler wird die wahrscheinlichkeitsglocke... da ich dadruch quasi mehrere Messungen vornehme und dadurch die klasse mit der meisten
Überlappung wahrscheinlicher wird.... die Inhibition holt die Info der vielfachen Messungen definitiv nicht raus (probiere zb U * 100 zu rechnen, nur mehr eine Klasse spiked.)
Ich bin mir nicht sicher ob und wie ich das lösen sollte... hab jetzt mit den parametern gespielt... tauDecay von 0.015 auf 0.003 zu setzen hat sehr geholfen, da dadurch weniger input spikes eingehen in die probabilities, und ich 
die input firing rate nicht noooch niedriger drehen muss (das machte probleme, da dann zu selten spikes kommen bei nur 3 - 9 input neurons...)
=> parameter: taudecay 0.003, firingRate = 90, AfiringRate = 450
=> mit diesen parametern sehn die inputs bei denen alle 3 pixel ungleich prior sind gut aus. (das ursprünglich problematische inputset)
=> normaleres input set: hier wirkt der prior zu schwach, versuchen prior schneller spiken zu lassen und dann nochmal probieren. Macht mby sinn, da ich jetzt ja 9 input neuronen hab (anstatt wie früher nur 3).

JE größer taudecay. desto mehr muss man firingRate (input) runter drehen, damit sie nicht nur eine klasse angeben. Das passiert, da mit größerem taudecay mehr spikes ins U einfließen.


Wie ich die output neuronen feuern lasse: würfeln welches feuert (abh. von rate) vs alle immer feuern lassen. Scheint kaum unterschied zu machen, im paper sagen sie dass alle feuern dürfen\





Best parameters without PRIOR:
taudecay = 0.015    finput 42Hz
taudecay = 0.004    finput 88Hz

now searching for Afiringrate with prior enabled
